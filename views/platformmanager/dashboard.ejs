<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Platform Manager Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
    <style>
        .category-item {
            border-left: 4px solid #667eea;
            transition: all 0.3s ease;
        }
        .category-item:hover {
            border-left-color: #764ba2;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body class="dashboard-container">
    <%- include('../partials/header', { title: 'Platform Manager Dashboard', user: user }) %>
    
    <!-- Toast Container -->
    <div class="toast-container"></div>
    
    <div class="container-fluid">
        <!-- Welcome Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="dashboard-header text-center">
                    <h1>
                        <i class="fas fa-tachometer-alt me-3"></i>
                        Welcome, <%= user.name %>
                    </h1>
                    <p>Manage your platform efficiently with our comprehensive dashboard</p>
                </div>
            </div>
        </div>

        <!-- Main Content Tabs -->
        <div class="row">
            <div class="col-12">
                <div class="dashboard-card card">
                    <div class="card-header section-header">
                        <ul class="nav nav-tabs card-header-tabs" id="mainTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="categories-tab" data-bs-toggle="tab" data-bs-target="#categories" type="button" role="tab">
                                    <i class="fas fa-tags me-2"></i>Categories
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="reports-tab" data-bs-toggle="tab" data-bs-target="#reports" type="button" role="tab">
                                    <i class="fas fa-chart-bar me-2"></i>Reports
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="analytics-tab" data-bs-toggle="tab" data-bs-target="#analytics" type="button" role="tab">
                                    <i class="fas fa-chart-line me-2"></i>Analytics
                                </button>
                            </li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="mainTabsContent">
                            <!-- Categories Tab -->
                            <div class="tab-pane fade show active" id="categories" role="tabpanel">
                                <div class="row mb-4">
                                    <div class="col-md-3">
                                        <button class="btn btn-success action-btn w-100" data-bs-toggle="modal" data-bs-target="#createCategoryModal">
                                            <i class="fas fa-plus me-2"></i>Create Category
                                        </button>
                                    </div>
                                    <div class="col-md-3">
                                        <button class="btn btn-primary action-btn w-100" data-bs-toggle="modal" data-bs-target="#updateCategoryModal">
                                            <i class="fas fa-edit me-2"></i>Update Category
                                        </button>
                                    </div>
                                    <div class="col-md-3">
                                        <button class="btn btn-info action-btn w-100" onclick="viewAllCategories()">
                                            <i class="fas fa-eye me-2"></i>View All Categories
                                        </button>
                                    </div>
                                    <div class="col-md-3">
                                        <button class="btn btn-danger action-btn w-100" data-bs-toggle="modal" data-bs-target="#deleteCategoryModal">
                                            <i class="fas fa-trash me-2"></i>Delete Category
                                        </button>
                                    </div>
                                </div>

                                <!-- Categories List -->
                                <div id="categoriesList" class="mt-4">
                                    <h5><i class="fas fa-list me-2"></i>Categories</h5>
                                    <div id="categoriesContent">
                                        <div class="text-center py-4">
                                            <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                                            <p class="text-muted mt-2">Loading categories...</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Reports Tab -->
                            <div class="tab-pane fade" id="reports" role="tabpanel">
                                <div class="row">
                                    <div class="col-md-4 mb-4">
                                        <div class="card h-100">
                                            <div class="card-header bg-success text-white text-center">
                                                <i class="fas fa-calendar-day fa-2x mb-2"></i>
                                                <h5>Daily Report</h5>
                                            </div>
                                            <div class="card-body text-center">
                                                <p class="text-muted">Generate daily activity report</p>
                                                <form id="dailyReportForm">
                                                    <input type="hidden" name="userId" value="<%= user.id %>">
                                                    <div class="mb-3">
                                                        <input type="date" class="form-control" name="date" required>
                                                    </div>
                                                    <button type="submit" class="btn btn-success action-btn">
                                                        <i class="fas fa-download me-2"></i>Generate Daily
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-4 mb-4">
                                        <div class="card h-100">
                                            <div class="card-header bg-info text-white text-center">
                                                <i class="fas fa-calendar-week fa-2x mb-2"></i>
                                                <h5>Weekly Report</h5>
                                            </div>
                                            <div class="card-body text-center">
                                                <p class="text-muted">Generate weekly summary report</p>
                                                <form id="weeklyReportForm">
                                                    <input type="hidden" name="userId" value="<%= user.id %>">
                                                    <div class="mb-3">
                                                        <input type="week" class="form-control" name="week" required>
                                                    </div>
                                                    <button type="submit" class="btn btn-info action-btn">
                                                        <i class="fas fa-download me-2"></i>Generate Weekly
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-4 mb-4">
                                        <div class="card h-100">
                                            <div class="card-header bg-warning text-white text-center">
                                                <i class="fas fa-calendar-alt fa-2x mb-2"></i>
                                                <h5>Monthly Report</h5>
                                            </div>
                                            <div class="card-body text-center">
                                                <p class="text-muted">Generate monthly comprehensive report</p>
                                                <form id="monthlyReportForm">
                                                    <input type="hidden" name="userId" value="<%= user.id %>">
                                                    <div class="mb-3">
                                                        <input type="month" class="form-control" name="month" required>
                                                    </div>
                                                    <button type="submit" class="btn btn-warning action-btn">
                                                        <i class="fas fa-download me-2"></i>Generate Monthly
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Analytics Tab -->
                            <div class="tab-pane fade" id="analytics" role="tabpanel">
                                <div class="row">
                                    <div class="col-12">
                                        <h5><i class="fas fa-chart-pie me-2"></i>Platform Analytics</h5>
                                        <p class="text-muted">Real-time insights into platform performance</p>
                                        
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="card">
                                                    <div class="card-header">
                                                        <h6><i class="fas fa-chart-bar me-2"></i>Category Popularity</h6>
                                                    </div>
                                                    <div class="card-body">
                                                        <canvas id="categoryChart" width="400" height="200"></canvas>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="card">
                                                    <div class="card-header">
                                                        <h6><i class="fas fa-chart-line me-2"></i>Request Trends</h6>
                                                    </div>
                                                    <div class="card-body">
                                                        <canvas id="trendsChart" width="400" height="200"></canvas>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Results Modal -->
    <div class="modal fade" id="reportResultsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-file-alt me-2"></i>Report Results</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="reportSummary" class="mb-3"></div>
                    <div id="reportDetails" class="border rounded p-3 bg-light" style="max-height: 300px; overflow: auto;"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Category Modal -->
    <div class="modal fade" id="createCategoryModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus-circle text-success me-2"></i>Create New Category
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createCategoryForm" class="needs-validation" novalidate>
                        <input type="hidden" name="userId" value="<%= user.id %>">
                        <div class="mb-3">
                            <label for="categoryName" class="form-label">Category Name</label>
                            <input type="text" class="form-control" id="categoryName" name="categoryName" required>
                            <div class="invalid-feedback">Please provide a category name.</div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3" placeholder="Optional description..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="createCategory()">
                        <i class="fas fa-plus me-2"></i>Create Category
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Update Category Modal -->
    <div class="modal fade" id="updateCategoryModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-edit text-primary me-2"></i>Update Category
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="updateCategoryForm" class="needs-validation" novalidate>
                        <input type="hidden" name="userId" value="<%= user.id %>">
                        <div class="mb-3">
                            <label for="updateCategoryId" class="form-label">Category ID</label>
                            <input type="text" class="form-control" id="updateCategoryId" name="categoryId" required readonly>
                            <div class="form-text">This field is auto-filled when you click Edit on a category.</div>
                        </div>
                        <div class="mb-3">
                            <label for="currentName" class="form-label">Current Name</label>
                            <input type="text" class="form-control" id="currentName" readonly style="background-color: #f8f9fa;">
                            <div class="form-text">Current category name (read-only)</div>
                        </div>
                        <div class="mb-3">
                            <label for="newName" class="form-label">New Name</label>
                            <input type="text" class="form-control" id="newName" name="newName" required>
                            <div class="invalid-feedback">Please provide a new name.</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateCategory()">
                        <i class="fas fa-edit me-2"></i>Update Category
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Category Modal -->
    <div class="modal fade" id="deleteCategoryModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="deleteCategoryForm">
                        <input type="hidden" name="userId" value="<%= user.id %>">
                        <div class="mb-3">
                            <label for="deleteCategoryId" class="form-label">Category ID to Delete</label>
                            <input type="text" class="form-control" id="deleteCategoryId" name="categoryId" required>
                            <div class="form-text">This action cannot be undone.</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="deleteCategory()">
                        <i class="fas fa-trash me-2"></i>Delete Category
                    </button>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Global variables
        let categoriesData = [];
        let charts = {};

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadCategories();
            initializeCharts();
            loadTrendsData();
            setupEventListeners();
        });

        // Debug function to check modal state
        function debugModalState() {
            console.log('Modal elements:', document.querySelectorAll('.modal'));
            console.log('Modal with show class:', document.querySelector('.modal.show'));
            console.log('Modal backdrop:', document.querySelector('.modal-backdrop'));
            console.log('Body classes:', document.body.className);
            console.log('Body styles:', {
                overflow: document.body.style.overflow,
                paddingRight: document.body.style.paddingRight
            });
        }

        // Make debug function available globally
        window.debugModalState = debugModalState;

        // Setup event listeners
        function setupEventListeners() {
            // Report forms
            document.getElementById('dailyReportForm').addEventListener('submit', function(e) {
                e.preventDefault();
                generateReport('daily');
            });

            document.getElementById('weeklyReportForm').addEventListener('submit', function(e) {
                e.preventDefault();
                generateReport('weekly');
            });

            document.getElementById('monthlyReportForm').addEventListener('submit', function(e) {
                e.preventDefault();
                generateReport('monthly');
            });

            // Clean up orphaned backdrop after modal closes
            document.addEventListener('hidden.bs.modal', function() {
                // Small delay to ensure modal is fully closed
                setTimeout(() => {
                    if (!document.querySelector('.modal.show')) {
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) {
                            backdrop.remove();
                        }
                        document.body.classList.remove('modal-open');
                        document.body.style.overflow = '';
                        document.body.style.paddingRight = '';
                    }
                }, 100);
            });
        }

        // AJAX helper function
        async function makeRequest(url, data) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                return await response.json();
            } catch (error) {
                console.error('Request failed:', error);
                showToast('Request failed. Please try again.', 'error');
                return { success: false, error: 'Network error' };
            }
        }

        // Show toast notifications
        function showToast(message, type = 'info') {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            const bgClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-info';
            
            const toastHTML = `
                <div id="${toastId}" class="toast ${bgClass} text-white" role="alert">
                    <div class="toast-body">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                        ${message}
                    </div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHTML);
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
            
            // Remove toast after it's hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        // Minimal cleanup to clear any leftover modal artifacts
        function cleanupModalArtifacts() {
            // Only clean if no modal is currently shown
            if (!document.querySelector('.modal.show')) {
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) backdrop.remove();
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
            }
        }


        // Load categories
        async function loadCategories() {
            try {
                const result = await makeRequest('/bce/platformmanager_viewcategory/viewCategory', {
                    userId: '<%= user.id %>'
                });
                
                if (result.success) {
                    categoriesData = result.data || [];
                    displayCategories();
                } else {
                    showToast('Failed to load categories: ' + result.error, 'error');
                }
            } catch (error) {
                showToast('Error loading categories', 'error');
            }
        }

        // Load trends data
        async function loadTrendsData() {
            try {
                const result = await makeRequest('/bce/platformmanager_generatedailyreport/getRequestTrends', {
                    days: 30
                });
                
                if (result.success && charts.trends) {
                    charts.trends.data.labels = result.data.labels;
                    charts.trends.data.datasets[0].data = result.data.data;
                    charts.trends.update();
                } else {
                    console.error('Failed to load trends data:', result.error);
                }
            } catch (error) {
                console.error('Error loading trends data:', error);
            }
        }

        // Display categories
        async function displayCategories() {
            const container = document.getElementById('categoriesContent');
            
            if (categoriesData.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No categories found. Create your first category!</p>
                    </div>
                `;
                return;
            }

            // Get real-time request counts for each category
            const categoriesWithCounts = await Promise.all(
                categoriesData.map(async (category) => {
                    const result = await makeRequest('/bce/platformmanager_viewcategory/getCategoryRequestCount', {
                        categoryId: category.id
                    });
                    return {
                        ...category,
                        realRequestCount: result.success ? result.count : 0
                    };
                })
            );

            const categoriesHTML = categoriesWithCounts.map(category => `
                <div class="category-item card mb-3 fade-in">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h6 class="mb-1">${category.name || 'Unnamed Category'}</h6>
                                <p class="text-muted mb-0">${category.description || 'No description'}</p>
                                <small class="text-muted">ID: ${category.id}</small>
                            </div>
                            <div class="col-md-3">
                                <div class="border rounded p-2 text-center bg-light">
                                    <span class="fw-bold text-primary fs-4">${category.realRequestCount}</span>
                                    <span class="text-muted"> requests</span>
                                </div>
                            </div>
                            <div class="col-md-3 text-end">
                                <button class="btn btn-sm btn-outline-primary me-1" onclick="editCategory('${category.id}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="confirmDeleteCategory('${category.id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');

            container.innerHTML = categoriesHTML;
        }


        // Create category
        async function createCategory() {
            const form = document.getElementById('createCategoryForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            if (!data.categoryName.trim()) {
                showToast('Please enter a category name', 'error');
                return;
            }

            try {
                const result = await makeRequest('/bce/platformmanager_createcategory/createCategory', data);
                
                if (result.success) {
                    showToast('Category created successfully!', 'success');
                    form.reset();
                    loadCategories();
                    // Close the modal
                    try {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('createCategoryModal'));
                        if (modal) {
                            modal.hide();
                        } else {
                            // Fallback: create new instance and hide
                            const newModal = new bootstrap.Modal(document.getElementById('createCategoryModal'));
                            newModal.hide();
                        }
                    } catch (error) {
                        console.error('Error closing modal:', error);
                        // Force close by removing classes and backdrop
                        document.getElementById('createCategoryModal').classList.remove('show');
                        document.body.classList.remove('modal-open');
                        const backdrop = document.querySelector('.modal-backdrop');
                        if (backdrop) backdrop.remove();
                    }
                    // Ensure any leftover artifacts are cleared
                    cleanupModalArtifacts();
                } else {
                    showToast('Failed to create category: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('Error creating category:', error);
                showToast('An error occurred while creating the category', 'error');
                // Don't close modal on error so user can try again
            }
        }

        // Update category
        async function updateCategory() {
            const form = document.getElementById('updateCategoryForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            if (!data.categoryId.trim() || !data.newName.trim()) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            try {
                const result = await makeRequest('/bce/platformmanager_updatecategory/updateCategory', data);
                
                if (result.success) {
                    showToast('Category updated successfully!', 'success');
                    form.reset();
                    loadCategories();
                    // Close the modal
                    bootstrap.Modal.getInstance(document.getElementById('updateCategoryModal')).hide();
                    cleanupModalArtifacts();
                } else {
                    showToast('Failed to update category: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('Error updating category:', error);
                showToast('An error occurred while updating the category', 'error');
                // Don't close modal on error so user can try again
            }
        }

        // Delete category
        async function deleteCategory() {
            const categoryId = document.getElementById('deleteCategoryId').value;
            
            if (!categoryId.trim()) {
                showToast('Please enter a category ID', 'error');
                return;
            }

            const result = await makeRequest('/bce/platformmanager_deletecategory/deleteCategory', {
                userId: '<%= user.id %>',
                categoryId: categoryId
            });
            
            if (result.success) {
                showToast('Category deleted successfully!', 'success');
                document.getElementById('deleteCategoryId').value = '';
                bootstrap.Modal.getInstance(document.getElementById('deleteCategoryModal')).hide();
                loadCategories();
                cleanupModalArtifacts();
            } else {
                showToast('Failed to delete category: ' + result.error, 'error');
            }
        }

        // View all categories
        async function viewAllCategories() {
            await loadCategories();
            showToast('Categories refreshed!', 'success');
        }

        // Search reports - removed

        // Generate reports
        async function generateReport(type) {
            const form = document.getElementById(type + 'ReportForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            const endpoint = `/bce/platformmanager_generate${type}report/generate${type.charAt(0).toUpperCase() + type.slice(1)}Report`;
            const result = await makeRequest(endpoint, data);
            
            if (result.success) {
                showToast(`${type.charAt(0).toUpperCase() + type.slice(1)} report generated successfully!`, 'success');
                console.log(`${type} report data:`, result.data);
                
                // Display report data in a modal or alert
                if (result.data) {
                    displayReportData(type, result.data);
                }
            } else {
                showToast(`Failed to generate ${type} report: ` + result.error, 'error');
            }
        }

        // Display report data in a modal
        function displayReportData(type, data) {
            const titleCase = type.charAt(0).toUpperCase() + type.slice(1);
            const summaryHtml = `
                <div class="row text-center">
                    <div class="col">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body">
                                <div class="text-muted">Total</div>
                                <div class="fs-4 fw-bold">${data.total || 0}</div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body">
                                <div class="text-muted">Pending</div>
                                <div class="fs-4 fw-bold">${data.pending || 0}</div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body">
                                <div class="text-muted">Completed</div>
                                <div class="fs-4 fw-bold">${data.completed || 0}</div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body">
                                <div class="text-muted">Cancelled</div>
                                <div class="fs-4 fw-bold">${data.cancelled || 0}</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-3 text-end text-muted">${titleCase} report • ${new Date().toLocaleString()}</div>
            `;

            // Hide details section for now since we only have summary stats
            document.getElementById('reportSummary').innerHTML = summaryHtml;
            document.getElementById('reportDetails').style.display = 'none';

            const modal = new bootstrap.Modal(document.getElementById('reportResultsModal'));
            modal.show();
        }

        // Edit category
        function editCategory(categoryId) {
            // Find the category data
            const category = categoriesData.find(cat => cat.id === categoryId);
            
            document.getElementById('updateCategoryId').value = categoryId;
            document.getElementById('currentName').value = category ? category.name : '';
            document.getElementById('newName').value = category ? category.name : '';
            document.getElementById('newName').focus();
            
            // Open the update modal
            const updateModal = new bootstrap.Modal(document.getElementById('updateCategoryModal'));
            updateModal.show();
            
            showToast('Category details loaded. Modify the name and click Update.', 'info');
        }

        // Confirm delete category
        function confirmDeleteCategory(categoryId) {
            document.getElementById('deleteCategoryId').value = categoryId;
            new bootstrap.Modal(document.getElementById('deleteCategoryModal')).show();
        }

        // Initialize charts
        function initializeCharts() {
            // Category popularity chart
            const categoryCtx = document.getElementById('categoryChart');
            if (categoryCtx) {
                charts.category = new Chart(categoryCtx, {
                    type: 'bar',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Requests',
                            data: [],
                            backgroundColor: '#4facfe',
                            borderColor: '#4facfe',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            }

            // Trends chart
            const trendsCtx = document.getElementById('trendsChart');
            if (trendsCtx) {
                charts.trends = new Chart(trendsCtx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Requests',
                            data: [],
                            borderColor: '#667eea',
                            backgroundColor: 'rgba(102, 126, 234, 0.1)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            }
        }

        // Update charts when data changes
        async function updateCharts() {
            if (charts.category && categoriesData.length > 0) {
                // Get actual request counts from database
                const requestCounts = await Promise.all(
                    categoriesData.map(async (cat) => {
                        const result = await makeRequest('/bce/platformmanager_viewcategory/getCategoryRequestCount', {
                            categoryId: cat.id
                        });
                        return result.success ? result.count : 0;
                    })
                );
                
                const categoryNames = categoriesData.map(cat => cat.name || 'Unnamed Category');
                
                charts.category.data.labels = categoryNames;
                charts.category.data.datasets[0].data = requestCounts;
                charts.category.update();
            }
        }

        // Override loadCategories to also update charts
        const originalLoadCategories = loadCategories;
        loadCategories = async function() {
            await originalLoadCategories();
            updateCharts();
        };
    </script>
</body>
</html>