<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Person in Need Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
</head>
<body class="dashboard-container">
    <%- include('../partials/header', { title: 'Person in Need Dashboard', user: user }) %>
    
    <div class="container-fluid">
        <!-- Welcome Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="dashboard-header text-center">
                    <h1>
                        <i class="fas fa-user-heart me-3"></i>
                        Welcome, <%= user.name %>
                    </h1>
                    <p>Manage your assistance requests and track your progress</p>
                </div>
            </div>
        </div>
                
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle"></i> <%= error %>
                    </div>
                <% } %>
                
                <% if (typeof success !== 'undefined' && success) { %>
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-check-circle"></i> <%= success %>
                    </div>
                <% } %>
                
                <!-- Quick Actions -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <i class="fas fa-plus-circle fa-3x text-primary mb-3"></i>
                                <h5>Create Request</h5>
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createRequestModal">New Request</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <i class="fas fa-list fa-3x text-info mb-3"></i>
                                <h5>My Requests</h5>
                                <a href="#requests-section" class="btn btn-info">View All</a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                                <h5>Completed Matches</h5>
                                <button onclick="scrollToCompletedMatches()" class="btn btn-success">View Completed</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Search Requests Section -->
                <div class="card mb-4" id="requests-section">
                    <div class="card-header">
                        <h5><i class="fas fa-search"></i> Search My Requests</h5>
                    </div>
                    <div class="card-body">
                        <form action="/personinneed/search-requests" method="POST">
                            <input type="hidden" name="userId" value="<%= user.id %>">
                            <div class="row g-3">
                                <div class="col-md-3">
                                    <label for="category" class="form-label">Category</label>
                                    <select class="form-select" id="category" name="category">
                                        <option value="">All Categories</option>
                                        <!-- Categories will be loaded dynamically -->
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="status" class="form-label">Status</label>
                                    <select class="form-select" id="status" name="status">
                                        <option value="">All Status</option>
                                        <option value="pending">Pending</option>
                                        <option value="assigned">Assigned</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="dateFrom" class="form-label">Date From</label>
                                    <input type="date" class="form-control" id="dateFrom" name="dateFrom">
                                </div>
                                <div class="col-md-3">
                                    <label for="dateTo" class="form-label">Date To</label>
                                    <input type="date" class="form-control" id="dateTo" name="dateTo">
                                </div>
                            </div>
                            <div class="row g-3 mt-2">
                                <div class="col-md-12">
                                    <label class="form-label">&nbsp;</label>
                                    <div>
                                        <button type="submit" class="btn btn-primary me-2">
                                            <i class="fas fa-search"></i> Search Requests
                                        </button>
                                        <button type="button" class="btn btn-secondary" onclick="clearSearchForm()">
                                            <i class="fas fa-times"></i> Clear
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                
                <!-- Search Results (if any) -->
                <% if (typeof searchResults !== 'undefined' && searchResults) { %>
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-search"></i> Search Results 
                            <span class="badge bg-primary"><%= searchResults.length %> found</span>
                        </h5>
                        <a href="/personinneed/dashboard" class="btn btn-secondary">
                            <i class="fas fa-times"></i> Clear Search
                        </a>
                    </div>
                    <div class="card-body">
                        <% if (searchResults.length > 0) { %>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Status</th>
                                        <th>Urgency</th>
                                        <th>Views</th>
                                        <th>Shortlist</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% searchResults.forEach(request => { %>
                                    <tr data-request-id="<%= request.id %>">
                                        <td><%= request.title %></td>
                                        <td><span class="badge bg-primary"><%= request.categoryname %></span></td>
                                        <td><span class="badge bg-warning"><%= request.status %></span></td>
                                        <td><span class="badge bg-info"><%= request.urgency %></span></td>
                                        <td><span class="badge bg-secondary view-count"><i class="fas fa-spinner fa-spin"></i> Loading...</span></td>
                                        <td><span class="badge bg-warning shortlist-count"><i class="fas fa-spinner fa-spin"></i> Loading...</span></td>
                                        <td><%= new Date(request.createdat).toLocaleDateString() %></td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="editRequest('<%= request.id %>')" title="Edit Request">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteRequest('<%= request.id %>')" title="Delete Request">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                        <% } else { %>
                        <div class="text-center text-muted">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <p>No requests found matching your search criteria.</p>
                        </div>
                        <% } %>
                    </div>
                </div>
                <% } %>

                <!-- My Requests List -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">My Requests</h5>
                        <a href="/personinneed/create-request" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Create New Request
                        </a>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Status</th>
                                        <th>Urgency</th>
                                        <th>Views</th>
                                        <th>Shortlist</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="requests-table-body">
                                    <!-- Requests will be loaded dynamically -->
                                    <tr id="no-requests-row" style="display: none;">
                                        <td colspan="8" class="text-center text-muted">
                                            <i class="fas fa-inbox fa-2x mb-2"></i>
                                            <p>No requests found. <a href="/personinneed/create-request">Create your first request</a></p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                
                <!-- Completed Matches Section -->
                <div class="card mb-4" id="completed-matches-section">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="fas fa-check-circle text-success"></i> Completed Matches</h5>
                        <button onclick="hideCompletedMatches()" class="btn btn-sm btn-secondary">
                            <i class="fas fa-times"></i> Close
                        </button>
                    </div>
                    <div class="card-body">
                        <!-- Search Form for Completed Matches -->
                        <form id="completed-search-form">
                            <div class="row g-3 mb-3">
                                <div class="col-md-4">
                                    <label for="completed-category" class="form-label">Category</label>
                                    <select class="form-select" id="completed-category" name="category">
                                        <option value="">All Categories</option>
                                        <!-- Categories will be loaded dynamically -->
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="completed-dateFrom" class="form-label">Date From</label>
                                    <input type="date" class="form-control" id="completed-dateFrom" name="dateFrom">
                                </div>
                                <div class="col-md-3">
                                    <label for="completed-dateTo" class="form-label">Date To</label>
                                    <input type="date" class="form-control" id="completed-dateTo" name="dateTo">
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">&nbsp;</label>
                                    <div>
                                        <button type="button" class="btn btn-primary me-2" onclick="searchCompletedMatches()">
                                            <i class="fas fa-search"></i> Search
                                        </button>
                                        <button type="button" class="btn btn-secondary" onclick="clearCompletedSearch()">
                                            <i class="fas fa-times"></i> Clear
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                        
                        <!-- Completed Matches Table -->
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Request Title</th>
                                        <th>Category</th>
                                        <th>Urgency</th>
                                        <th>Date Posted</th>
                                        <th>Date Completed</th>
                                        <th>Views</th>
                                        <th>Shortlists</th>
                                    </tr>
                                </thead>
                                <tbody id="completed-matches-table-body">
                                    <!-- Completed matches will be loaded dynamically -->
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- No completed matches message -->
                        <div id="no-completed-matches" class="text-center py-5" style="display: none;">
                            <i class="fas fa-check-circle text-muted" style="font-size: 3rem;"></i>
                            <h4 class="text-muted mt-3">No Completed Matches Found</h4>
                            <p class="text-muted">You don't have any completed assistance requests yet.</p>
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
    
    <%- include('../partials/footer') %>
    
    <script>
        // Load categories dynamically
        async function loadCategories() {
            try {
                const response = await fetch('/api/categories');
                const data = await response.json();
                
                if (data.success) {
                    // Populate search category dropdown
                    const categorySelect = document.getElementById('category');
                    if (categorySelect) {
                        const allCategoriesOption = categorySelect.querySelector('option[value=""]');
                        categorySelect.innerHTML = '';
                        categorySelect.appendChild(allCategoriesOption);
                        
                        data.categories.forEach(category => {
                            const option = document.createElement('option');
                            option.value = category.name;
                            option.textContent = category.name;
                            categorySelect.appendChild(option);
                        });
                    }
                    
                    // Populate create modal category dropdown
                    const createCategorySelect = document.getElementById('createCategory');
                    if (createCategorySelect) {
                        const defaultOption = createCategorySelect.querySelector('option[value=""]');
                        createCategorySelect.innerHTML = '';
                        createCategorySelect.appendChild(defaultOption);
                        
                        data.categories.forEach(category => {
                            const option = document.createElement('option');
                            option.value = category.name;
                            option.textContent = category.name;
                            createCategorySelect.appendChild(option);
                        });
                    }
                } else {
                    console.error('Failed to load categories:', data.error);
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }
        
        // Load user requests dynamically
        async function loadUserRequests() {
            try {
                const response = await fetch('/api/user-requests');
                const data = await response.json();
                
                if (data.success) {
                    const tbody = document.getElementById('requests-table-body');
                    const noRequestsRow = document.getElementById('no-requests-row');
                    
                    // Clear existing rows except the no-requests row
                    tbody.innerHTML = '';
                    tbody.appendChild(noRequestsRow);
                    
                    if (data.data.requests && data.data.requests.length > 0) {
                        // Hide no-requests row
                        noRequestsRow.style.display = 'none';
                        
                        // Add request rows and load counts dynamically
                        for (const request of data.data.requests) {
                            const row = createRequestRow(request);
                            tbody.appendChild(row);
                            
                            // Load counts for this request using tracking functions
                            await Promise.all([
                                getViewCount(request.id),
                                getShortlistCount(request.id)
                            ]);
                        }
                    } else {
                        // Show no-requests row
                        noRequestsRow.style.display = '';
                    }
                } else {
                    console.error('Failed to load requests:', data.error);
                }
            } catch (error) {
                console.error('Error loading requests:', error);
            }
        }
        
        // Create a table row for a request
        function createRequestRow(request) {
            const row = document.createElement('tr');
            row.setAttribute('data-request-id', request.id);
            
            // Format date - handle both camelCase and lowercase field names
            const createdDate = new Date(request.createdAt || request.createdat).toLocaleDateString();
            
            // Get status badge class
            const statusClass = getStatusBadgeClass(request.status);
            
            // Get urgency badge class
            const urgencyClass = getUrgencyBadgeClass(request.urgency);
            
            row.innerHTML = `
                <td>${request.title}</td>
                <td><span class="badge bg-primary">${request.categoryName || request.categoryname}</span></td>
                <td><span class="badge ${statusClass}">${request.status}</span></td>
                <td><span class="badge ${urgencyClass}">${request.urgency}</span></td>
                <td><span class="badge bg-secondary view-count"><i class="fas fa-spinner fa-spin"></i> Loading...</span></td>
                <td><span class="badge bg-warning shortlist-count"><i class="fas fa-spinner fa-spin"></i> Loading...</span></td>
                <td>${createdDate}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="editRequest('${request.id}')" title="Edit Request">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteRequest('${request.id}')" title="Delete Request">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            
            return row;
        }
        
        // Get status badge class
        function getStatusBadgeClass(status) {
            switch(status.toLowerCase()) {
                case 'pending': return 'bg-warning';
                case 'assigned': return 'bg-info';
                case 'completed': return 'bg-success';
                default: return 'bg-secondary';
            }
        }
        
        // Get urgency badge class
        function getUrgencyBadgeClass(urgency) {
            switch(urgency.toLowerCase()) {
                case 'low': return 'bg-success';
                case 'medium': return 'bg-warning';
                case 'high': return 'bg-danger';
                case 'critical': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }
        
        // Clear search form
        function clearSearchForm() {
            document.getElementById('category').value = '';
            document.getElementById('status').value = '';
            document.getElementById('dateFrom').value = '';
            document.getElementById('dateTo').value = '';
        }
        
        // Scroll to completed matches section
        function scrollToCompletedMatches() {
            const section = document.getElementById('completed-matches-section');
            section.scrollIntoView({ behavior: 'smooth' });
        }
        
        // Hide completed matches section
        function hideCompletedMatches() {
            document.getElementById('completed-matches-section').style.display = 'none';
        }
        
        // Clear completed matches search form
        function clearCompletedSearch() {
            document.getElementById('completed-category').value = '';
            document.getElementById('completed-dateFrom').value = '';
            document.getElementById('completed-dateTo').value = '';
        }
        
        // Load completed matches
        async function loadCompletedMatches() {
            try {
                // Load categories for the search form
                await loadCompletedCategories();
                
                const response = await fetch('/api/completed-requests');
                const data = await response.json();
                
                if (data.success && data.data.requests) {
                    displayCompletedMatches(data.data.requests);
                } else {
                    showNoCompletedMatches();
                }
            } catch (error) {
                console.error('Error loading completed matches:', error);
                showNoCompletedMatches();
            }
        }
        
        // Search completed matches with filters
        async function searchCompletedMatches() {
            try {
                const category = document.getElementById('completed-category').value;
                const dateFrom = document.getElementById('completed-dateFrom').value;
                const dateTo = document.getElementById('completed-dateTo').value;
                
                const formData = new FormData();
                formData.append('userId', '<%= user.id %>');
                if (category) formData.append('category', category);
                if (dateFrom) formData.append('dateFrom', dateFrom);
                if (dateTo) formData.append('dateTo', dateTo);
                
                const response = await fetch('/personinneed/search-history', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    // Parse the HTML response to extract the completed requests data
                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    // Extract completed requests from the response
                    const completedRequests = [];
                    const rows = doc.querySelectorAll('#completed-matches-table-body tr');
                    rows.forEach(row => {
                        const cells = row.querySelectorAll('td');
                        if (cells.length > 0) {
                            const title = cells[0].querySelector('strong')?.textContent || '';
                            const category = cells[1].textContent.trim();
                            const urgency = cells[2].textContent.trim();
                            const datePosted = cells[3].textContent.trim();
                            const dateCompleted = cells[4].textContent.trim();
                            const views = cells[5].textContent.trim();
                            const shortlists = cells[6].textContent.trim();
                            
                            completedRequests.push({
                                title,
                                categoryname: category,
                                urgency,
                                createdat: datePosted,
                                updatedat: dateCompleted,
                                viewcount: parseInt(views) || 0,
                                shortlistcount: parseInt(shortlists) || 0
                            });
                        }
                    });
                    
                    displayCompletedMatches(completedRequests);
                } else {
                    showNoCompletedMatches();
                }
            } catch (error) {
                console.error('Error searching completed matches:', error);
                showNoCompletedMatches();
            }
        }
        
        // Display completed matches in table
        function displayCompletedMatches(requests) {
            const tbody = document.getElementById('completed-matches-table-body');
            const noMatchesDiv = document.getElementById('no-completed-matches');
            
            if (requests.length === 0) {
                showNoCompletedMatches();
                return;
            }
            
            tbody.innerHTML = '';
            noMatchesDiv.style.display = 'none';
            
            requests.forEach(request => {
                const row = document.createElement('tr');
                const createdDate = new Date(request.createdat || request.createdAt).toLocaleDateString();
                const completedDate = new Date(request.updatedat || request.updatedAt).toLocaleDateString();
                const urgencyClass = getUrgencyBadgeClass(request.urgency);
                
                row.innerHTML = `
                    <td>
                        <strong>${request.title}</strong>
                        ${request.description ? `<br><small class="text-muted">${request.description}</small>` : ''}
                    </td>
                    <td><span class="badge bg-primary">${request.categoryname || request.categoryName}</span></td>
                    <td><span class="badge ${urgencyClass}">${request.urgency}</span></td>
                    <td>${createdDate}</td>
                    <td>${completedDate}</td>
                    <td><span class="badge bg-info">${request.viewcount || 0}</span></td>
                    <td><span class="badge bg-warning">${request.shortlistcount || 0}</span></td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // Show no completed matches message
        function showNoCompletedMatches() {
            const tbody = document.getElementById('completed-matches-table-body');
            const noMatchesDiv = document.getElementById('no-completed-matches');
            
            tbody.innerHTML = '';
            noMatchesDiv.style.display = 'block';
        }
        
        // Load categories for completed matches search
        async function loadCompletedCategories() {
            try {
                const response = await fetch('/api/categories');
                const data = await response.json();
                
                if (data.success && data.data.categories) {
                    const categorySelect = document.getElementById('completed-category');
                    
                    // Clear existing options except "All Categories"
                    categorySelect.innerHTML = '<option value="">All Categories</option>';
                    
                    // Add categories from database
                    data.data.categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.name;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading completed categories:', error);
            }
        }
        
        // Delete Request Function
        async function deleteRequest(requestId) {
            if (!confirm('Are you sure you want to delete this request? This action cannot be undone.')) {
                return;
            }
            
            try {
                const formData = new FormData();
                formData.append('userId', '<%= user.id %>');
                formData.append('requestId', requestId);
                
                const response = await fetch('/bce/personinneed_deleterequest/deleteRequest', {
                    method: 'POST',
                    headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess(data.message || 'Request deleted successfully!');
                    // Reload the requests list
                    loadUserRequests();
                } else {
                    showError(data.error || 'Failed to delete request');
                }
            } catch (error) {
                console.error('Error deleting request:', error);
                showError('Failed to delete request');
            }
        }
        
        // Show success message
        function showSuccess(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.innerHTML = `
                <i class="fas fa-check-circle"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.container-fluid').firstChild);
        }
        
        // Show error message
        function showError(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show';
            alertDiv.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.container-fluid').firstChild);
        }
        
        // Create Request Function
        async function createRequest() {
            const form = document.getElementById('createRequestForm');
            const formData = new FormData(form);
            
            try {
                const response = await fetch('/bce/personinneed_createrequest/createRequest', {
                    method: 'POST',
                    headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess(data.message || 'Request created successfully!');
                    // Close modal and reset form
                    bootstrap.Modal.getInstance(document.getElementById('createRequestModal')).hide();
                    form.reset();
                    // Reload requests
                    loadUserRequests();
                } else {
                    showError(data.error || 'Failed to create request');
                }
            } catch (error) {
                console.error('Error creating request:', error);
                showError('Failed to create request');
            }
        }

        // Update Request Function
        async function updateRequest() {
            const form = document.getElementById('editRequestForm');
            const formData = new FormData(form);
            
            try {
                const response = await fetch('/bce/personinneed_updaterequest/updateRequest', {
                    method: 'POST',
                    headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess(data.message || 'Request updated successfully!');
                    // Close modal and reset form
                    bootstrap.Modal.getInstance(document.getElementById('editRequestModal')).hide();
                    form.reset();
                    // Reload requests
                    loadUserRequests();
                } else {
                    showError(data.error || 'Failed to update request');
                }
            } catch (error) {
                console.error('Error updating request:', error);
                showError('Failed to update request');
            }
        }

        // Edit Request Function
        function editRequest(requestId) {
            // Find the request data
            const requestRow = document.querySelector(`tr[data-request-id="${requestId}"]`);
            if (!requestRow) {
                showError('Request not found');
                return;
            }
            
            // Extract data from the table row
            const title = requestRow.cells[0].textContent.trim();
            const urgency = requestRow.cells[3].textContent.trim().toLowerCase();
            
            // Fill the edit form
            document.getElementById('editRequestId').value = requestId;
            document.getElementById('editTitle').value = title;
            document.getElementById('editUrgency').value = urgency;
            
            // Show the modal
            new bootstrap.Modal(document.getElementById('editRequestModal')).show();
        }

        // Load counts for search results displayed on page load
        async function loadSearchResultCounts() {
            const searchResultRows = document.querySelectorAll('tr[data-request-id]');
            
            for (const row of searchResultRows) {
                const requestId = row.getAttribute('data-request-id');
                if (requestId) {
                    // Load both counts for this request
                    await Promise.all([
                        getViewCount(requestId),
                        getShortlistCount(requestId)
                    ]);
                }
            }
        }

        // Load data when page loads
        document.addEventListener('DOMContentLoaded', () => {
            loadCategories();
            loadUserRequests();
            loadCompletedMatches(); // Load completed matches automatically
            
            // Load counts for search results if they exist
            loadSearchResultCounts();
        });

        // Function to get view count for a request
        async function getViewCount(requestId) {
            try {
                const response = await fetch('/personinneed/get-view-count', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ requestId: requestId })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Update the view count badge in the table
                    const viewCountElement = document.querySelector(`tr[data-request-id="${requestId}"] .view-count`);
                    if (viewCountElement) {
                        viewCountElement.textContent = data.data.viewCount || 0;
                    }
                    return data.data.viewCount || 0;
                } else {
                    console.error('Failed to get view count:', data.error);
                    return 0;
                }
            } catch (error) {
                console.error('Error getting view count:', error);
                return 0;
            }
        }

        // Function to get shortlist count for a request
        async function getShortlistCount(requestId) {
            try {
                const response = await fetch('/personinneed/get-shortlist-count', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ requestId: requestId })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Update the shortlist count badge in the table
                    const shortlistCountElement = document.querySelector(`tr[data-request-id="${requestId}"] .shortlist-count`);
                    if (shortlistCountElement) {
                        shortlistCountElement.textContent = data.data.shortlistCount || 0;
                    }
                    return data.data.shortlistCount || 0;
                } else {
                    console.error('Failed to get shortlist count:', data.error);
                    return 0;
                }
            } catch (error) {
                console.error('Error getting shortlist count:', error);
                return 0;
            }
        }

        // Function to refresh counts for all visible requests
        async function refreshAllCounts() {
            const requestRows = document.querySelectorAll('tr[data-request-id]');
            
            for (const row of requestRows) {
                const requestId = row.getAttribute('data-request-id');
                if (requestId) {
                    // Get both counts for this request
                    await Promise.all([
                        getViewCount(requestId),
                        getShortlistCount(requestId)
                    ]);
                }
            }
        }

        // Add refresh button functionality
        function addRefreshButton() {
            // Find the search form area to add refresh button
            const searchForm = document.querySelector('#searchForm');
            if (searchForm) {
                const refreshButton = document.createElement('button');
                refreshButton.type = 'button';
                refreshButton.className = 'btn btn-outline-primary btn-sm ms-2';
                refreshButton.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh Counts';
                refreshButton.onclick = refreshAllCounts;
                
                // Add it after the search button
                const searchButton = searchForm.querySelector('button[type="submit"]');
                if (searchButton) {
                    searchButton.parentNode.appendChild(refreshButton);
                }
            }
        }

        // Initialize refresh button when page loads
        document.addEventListener('DOMContentLoaded', function() {
            addRefreshButton();
        });
    </script>

    <!-- Create Request Modal -->
    <div class="modal fade" id="createRequestModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-plus"></i> Create New Request</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createRequestForm">
                        <input type="hidden" name="userId" value="<%= user.id %>">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="createTitle" class="form-label">Request Title *</label>
                                <input type="text" class="form-control" id="createTitle" name="title" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="createCategory" class="form-label">Category *</label>
                                <select class="form-select" id="createCategory" name="category" required>
                                    <option value="">Select a category</option>
                                    <!-- Categories will be loaded dynamically -->
                                </select>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="createDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="createDescription" name="description" rows="4" 
                                      placeholder="Please provide detailed information about your request (optional)..."></textarea>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="createUrgency" class="form-label">Urgency Level *</label>
                                <select class="form-select" id="createUrgency" name="urgency" required>
                                    <option value="">Select urgency level</option>
                                    <option value="low">Low - Can wait a few weeks</option>
                                    <option value="medium">Medium - Needed within a week</option>
                                    <option value="high">High - Needed within 2-3 days</option>
                                    <option value="critical">Critical - Needed immediately</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createRequest()">
                        <i class="fas fa-plus"></i> Create Request
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Request Modal -->
    <div class="modal fade" id="editRequestModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-edit"></i> Edit Request</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editRequestForm">
                        <input type="hidden" name="userId" value="<%= user.id %>">
                        <input type="hidden" name="requestId" id="editRequestId">
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTitle" class="form-label">Request Title *</label>
                                <input type="text" class="form-control" id="editTitle" name="title" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editUrgency" class="form-label">Urgency Level *</label>
                                <select class="form-select" id="editUrgency" name="urgency" required>
                                    <option value="">Select urgency level</option>
                                    <option value="low">Low - Can wait a few weeks</option>
                                    <option value="medium">Medium - Needed within a week</option>
                                    <option value="high">High - Needed within 2-3 days</option>
                                    <option value="critical">Critical - Needed immediately</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" name="description" rows="4" 
                                      placeholder="Please provide detailed information about your request (optional)..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateRequest()">
                        <i class="fas fa-save"></i> Update Request
                    </button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>